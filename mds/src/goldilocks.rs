//! MDS matrices over the Goldilocks field, and permutations defined by them.
//!
//! NB: Not all sizes have fast implementations of their permutations.
//! Supported sizes: 8, 12, 16, 24, 32, 64, 68.
//! Sizes 8 and 12 are from Plonky2. Other sizes are from Ulrich Hab√∂ck's database.

use p3_dft::Radix2Bowers;
use p3_goldilocks::Goldilocks;
use p3_symmetric::Permutation;

use crate::util::{
    apply_circulant, apply_circulant_12_sml, apply_circulant_8_sml, apply_circulant_fft,
    first_row_to_first_col,
};
use crate::MdsPermutation;

#[derive(Clone, Default)]
pub struct MdsMatrixGoldilocks;

const FFT_ALGO: Radix2Bowers = Radix2Bowers;

impl Permutation<[Goldilocks; 8]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 8]) -> [Goldilocks; 8] {
        apply_circulant_8_sml(input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 8]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 8> for MdsMatrixGoldilocks {}

impl Permutation<[Goldilocks; 12]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 12]) -> [Goldilocks; 12] {
        apply_circulant_12_sml(input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 12]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 12> for MdsMatrixGoldilocks {}

#[rustfmt::skip]
const MATRIX_CIRC_MDS_16_GOLDILOCKS: [u64; 16] = [
    0x0FFF_FFFF_F000_1000, 0xF8FC_7C7D_47E3_E3F3, 0xEC43_C780_F1D8_7790, 0xEAFD_5FAB_0A81_4029,
    0x2999_9FFF_CFFF_FCCD, 0x4E7D_0C17_50C5_F9D0, 0xF3C5_A1E6_977E_1D30, 0x90DE_BDBD_F428_3830,
    0x4FFF_FFFF_AFFF_FAAB, 0xE50D_7B81_5794_23EF, 0xEC34_B87D_2E27_8690, 0xF701_1FDB_0D7E_4039,
    0x3666_5FFF_CFFF_FCCD, 0x8F7C_FBE7_4FC1_FE11, 0xF3C1_DE17_8881_E0F0, 0x511E_C2B9_33D8_4731,
];

impl Permutation<[Goldilocks; 16]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 16]) -> [Goldilocks; 16] {
        const ENTRIES: [u64; 16] = first_row_to_first_col(&MATRIX_CIRC_MDS_16_GOLDILOCKS);
        apply_circulant_fft(FFT_ALGO, ENTRIES, &input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 16]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 16> for MdsMatrixGoldilocks {}

#[rustfmt::skip]
const MATRIX_CIRC_MDS_24_GOLDILOCKS: [u64; 24] = [
    0x5FFF_FFFF_A00A_AAAB, 0x2402_1AB7_5BBF_E656, 0x7BE9_082D_73B0_6DF5, 0x2282_863E_9C3A_5A62,
    0xE007_1C70_DFFC_71C8, 0x796C_B65A_B42A_1A63, 0xDBBB_BFFA_DFFD_DDE3, 0x23B8_8EE2_17C5_C9C2,
    0x2003_0C30_9FFB_6DB7, 0x23C3_C647_63BE_1E1D, 0x0F93_B7C9_CC51_362E, 0xC697_A109_4BD0_850A,
    0xDFFF_FFFF_1FFC_71C8, 0xC15A_4FD6_1495_0302, 0xC41D_883A_4C4D_EDF2, 0x1878_79BC_23C4_6462,
    0x5FFC_F3CE_DFFE_79E8, 0x1C41_DF10_5B82_398E, 0x6444_4003_DFFD_DDDA, 0x76ED_DBB6_F7E5_1F95,
    0x1FF8_E38E_2003_8E39, 0x2141_39BD_5C40_A09D, 0x3065_B7CC_F3B3_B621, 0x23B6_F462_2485_CEDC,
];

impl Permutation<[Goldilocks; 24]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 24]) -> [Goldilocks; 24] {
        apply_circulant(&MATRIX_CIRC_MDS_24_GOLDILOCKS, input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 24]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 24> for MdsMatrixGoldilocks {}

#[rustfmt::skip]
const MATRIX_CIRC_MDS_32_GOLDILOCKS: [u64; 32] = [
    0x0800_0000_0000_0000, 0x6924_9248_B492_4925, 0x3ABD_5EAF_15EA_F57B, 0x294A_5294_739C_E73A,
    0x59E2_D2CE_B4B3_C5A6, 0x087F_BE00_FF7C_0220, 0xA554_AA94_A554_AA96, 0xF000_80FE_FFDF_8005,
    0x64CC_CCCC_6666_699A, 0x5B13_AD89_73B1_39D9, 0xAD4A_55AC_A54A_D5AA, 0xDA49_6DA3_B492_DB8A,
    0x4AD6_9695_5A56_94B5, 0xA4A6_B29A_25B4_96D3, 0xA74E_A162_162B_D3A9, 0xC698_B3A5_662C_E98C,
    0xA7FF_FFFF_5555_5556, 0x4AAA_AAAA_5AAA_AAAB, 0xB047_DC11_3DC1_1F71, 0x8BA2_E8B9_9B26_C9B3,
    0xD259_696C_5A5B_4D2E, 0xA7D5_40AA_557E_A9F6, 0x8B6E_922D_26DB_249C, 0xFAAA_8054_5560_2AAD,
    0xCB33_3332_6666_6334, 0xD13B_1761_9B13_B277, 0x45B2_6D93_26E9_374A, 0x52AB_552A_5AA9_556B,
    0x68ED_2D2D_B4B8_7697, 0x8B26_4C98_A74E_9D3B, 0x09EC_23D8_3D84_7B09, 0x2C9A_4D26_6693_49A5,
];

impl Permutation<[Goldilocks; 32]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 32]) -> [Goldilocks; 32] {
        const ENTRIES: [u64; 32] = first_row_to_first_col(&MATRIX_CIRC_MDS_32_GOLDILOCKS);
        apply_circulant_fft(FFT_ALGO, ENTRIES, &input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 32]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 32> for MdsMatrixGoldilocks {}

#[rustfmt::skip]
const MATRIX_CIRC_MDS_64_GOLDILOCKS: [u64; 64] = [
    0x07FF_FFFF_FC00_0000, 0xFBFF_FFFF_0400_0001, 0x436D_B6DB_25B6_DB6E, 0x4AAA_AAAA_5AAA_AAAB,
    0x45B2_D96C_6D96_CB66, 0x3BC7_BC7B_87BC_7BC8, 0x6318_C631_2529_4A53, 0xCB36_72CC_CD9C_B368,
    0xB43C_B5A1_2D68_796C, 0xFBFB_FBFA_FBFB_FBFD, 0x883D_BF10_7B7E_2210, 0x8A76_89B5_9B62_9DA3,
    0xF7FE_FFDF_0000_0001, 0x7B7C_83BB_C83B_C47C, 0xEFF0_4101_07EF_7F83, 0x2CD8_B362_9CB2_72CA,
    0x9800_0199_00CC_CE67, 0xFBFF_FBFF_07FF_FC01, 0x94EC_4A75_8C4E_C628, 0xDA5A_5B4A_6D2D_2E1F,
    0xFFEF_C080_FC00_3FFF, 0xBC38_7BC2_C783_BC79, 0xB492_DB68_6D24_B6F3, 0x1DB6_925B_4B6E_2477,
    0x7801_E0EF_87BF_FF10, 0xFC08_03FA_FBFC_0409, 0x3780_FE03_C086_F21C, 0x8B74_9B22_4DB2_2D94,
    0x3264_8B36_B76E_9923, 0x3BC3_C3C3_87C3_C3C4, 0x79AF_286B_4FCA_1AF3, 0x9E27_6275_8B62_7628,
    0x52AA_AAAA_56AA_AAAB, 0xFBFF_FFFE_FC00_0001, 0xF7FF_FFFF_0800_0001, 0x2CCC_CCCC_9CCC_CCCD,
    0xCF28_6BC9_46BC_A1B0, 0xBC48_3B7B_883B_7C49, 0xD936_4D92_87C1_F07D, 0xAD5A_94A8_A95A_D5AA,
    0xFF87_1002_C400_F1E1, 0xFC03_FC02_FC03_FC05, 0xD294_95A4_D6D4_B4A6, 0x6C92_6DD1_DD24_DB65,
    0x1EDC_247B_4DB6_4937, 0x7C7B_843B_47BC_437D, 0xA55A_95AA_AD5A_D52C, 0x4A96_D5A4_5AD6_94A6,
    0xFE66_64CB_CD99_9801, 0xFC00_03FF_0800_0401, 0x1EC4_F09D_64EC_4D8A, 0x9E1E_1D2C_8B4B_4A5B,
    0xD927_0937_709B_64DC, 0x3BB7_7C44_4884_3B78, 0xFFFF_FFDF_03FF_0021, 0x59D8_761D_2D8A_6299,
    0xC349_6878_A5E5_A4B5, 0xFBF8_0402_FC04_03F9, 0x5ECD_9B36_0E14_2851, 0x6D92_5D64_29D6_4976,
    0xA8AE_615C_19CC_2B99, 0xBC44_4443_8844_4445, 0xDFE3_F1F8_1CFC_7E40, 0xDA49_2491_6D24_924A,
];

impl Permutation<[Goldilocks; 64]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 64]) -> [Goldilocks; 64] {
        const ENTRIES: [u64; 64] = first_row_to_first_col(&MATRIX_CIRC_MDS_64_GOLDILOCKS);
        apply_circulant_fft(FFT_ALGO, ENTRIES, &input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 64]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 64> for MdsMatrixGoldilocks {}

#[rustfmt::skip]
const MATRIX_CIRC_MDS_68_GOLDILOCKS: [u64; 68] = [
    0x03C3_C3C3_FC3C_3C3C, 0x6799_AFC5_4A69_BC7D, 0xDA8C_2C49_6A74_B03B, 0x1E64_1D7A_B35E_D229,
    0x9239_DA20_DA3A_2686, 0x6E23_D414_59EB_A8C4, 0x7BC4_1289_6E2A_6B3A, 0x9082_0590_89AB_D4FC,
    0x94A1_6FA8_B033_9EEE, 0x8565_0EC9_1BB5_19C9, 0x1600_7452_67E9_4DE1, 0xFFFD_8405_C820_20AB,
    0x21BD_E804_29DC_ED6A, 0x8ACE_123A_F754_E343, 0xFFC7_2116_05D2_BDAE, 0xC211_87AE_1590_0F4D,
    0x9C4A_8897_0856_8DC6, 0x65A5_A726_B575_8D8E, 0x949D_B90B_9AC0_D11A, 0x23B6_CF7C_368B_BE52,
    0xD512_8DDF_59CB_5A35, 0xF53B_CC5B_DADF_3A0A, 0xBA7C_5112_F4BA_B1CD, 0x4B93_989C_5B72_9351,
    0x6534_B7E5_0E4A_D1CB, 0x6400_61B5_4C91_8405, 0x0E66_E1F9_0D2C_9311, 0x31C8_649B_0FE7_557F,
    0x0E91_90D1_65F4_A8F3, 0x52DF_336B_B708_F919, 0x3C0F_6697_F140_65A5, 0xBE81_9094_2EC5_0031,
    0x6003_8E9A_CC70_1118, 0x73F1_0590_9A55_A88B, 0xFEBE_BEBD_ABEB_EBED, 0x6F52_163A_64B0_3467,
    0xFBAE_131F_23A1_2F56, 0x1950_493B_C70D_0676, 0x2886_550D_B5A1_BBBF, 0x15B0_03D6_E581_81D7,
    0x3A4E_7D9D_44F1_00F8, 0x6CC3_AB89_6025_E6A0, 0x7E23_E684_56F8_25E5, 0x079C_DD57_0B59_1A16,
    0xEC15_A830_C3D2_CCD1, 0xCF4C_722D_2C0F_8A0E, 0xC1BB_6F55_91B5_9A26, 0xB63A_5931_A607_BDE0,
    0x43A0_AD0B_7104_0187, 0x7E4B_4928_89D1_CEE0, 0x7341_53F3_F0C3_1C5B, 0x98D8_D756_B272_5A5B,
    0x5589_D20D_74BA_00B8, 0xB2DF_58DF_0A31_2509, 0xFABC_3786_90D6_4A3A, 0x7006_40AF_C244_B695,
    0xFFA6_5223_6547_F3BE, 0x2B9C_A498_A001_D059, 0x7DAC_A6F1_6787_D5DE, 0xAAAD_774F_AC61_3EA3,
    0xA885_8381_6975_CD56, 0x78B7_1DC5_16FF_49CA, 0xC7BF_095D_F702_FFA6, 0x78A6_0B3F_9717_83B3,
    0xCB15_8EF4_0BC7_5CAC, 0xA97E_818D_BC15_2B4C, 0x9FC8_339D_415C_3999, 0x006A_88C0_A0D8_201C,
];

impl Permutation<[Goldilocks; 68]> for MdsMatrixGoldilocks {
    fn permute(&self, input: [Goldilocks; 68]) -> [Goldilocks; 68] {
        apply_circulant(&MATRIX_CIRC_MDS_68_GOLDILOCKS, input)
    }

    fn permute_mut(&self, input: &mut [Goldilocks; 68]) {
        *input = self.permute(*input);
    }
}
impl MdsPermutation<Goldilocks, 68> for MdsMatrixGoldilocks {}

#[cfg(test)]
mod tests {
    use p3_field::AbstractField;
    use p3_goldilocks::Goldilocks;
    use p3_symmetric::Permutation;

    use super::MdsMatrixGoldilocks;

    #[test]
    fn goldilocks8() {
        let input: [Goldilocks; 8] = [
            2_434_589_605_738_284_713,
            4_817_685_620_989_478_889,
            13_397_079_175_138_649_456,
            11_944_520_631_108_649_751,
            1_033_251_468_644_039_632,
            3_092_099_742_268_329_866,
            7_160_548_811_622_790_454,
            9_959_569_614_427_134_344,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 8] = [
            7_296_579_203_883_891_650,
            15_846_818_354_170_800_942,
            2_722_920_531_482_623_643,
            9_616_208_848_921_711_631,
            490_813_044_365_975_970,
            5_031_976_952_389_823_366,
            7_947_699_737_923_523_585,
            12_198_158_979_238_091_825,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks12() {
        let input: [Goldilocks; 12] = [
            14_847_187_883_725_400_244,
            969_392_934_980_971_521,
            6_996_647_758_016_470_432,
            4_674_844_440_624_672_154,
            264_841_656_685_969_785,
            1_246_852_265_697_711_623,
            18_223_868_478_428_473_484,
            12_122_736_699_239_070_772,
            11_263_701_854_732_819_430,
            12_739_925_508_864_285_577,
            11_648_637_570_857_932_167,
            14_090_978_315_217_600_393,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 12] = [
            1_843_219_901_452_929_153,
            8_403_333_524_301_862_517,
            6_376_512_008_882_165_421,
            8_955_522_364_079_524_476,
            9_670_564_897_072_663_334,
            3_938_053_462_378_634_031,
            6_601_899_746_530_774_049,
            12_760_892_837_989_840_359,
            18_262_125_928_170_834_728,
            16_489_603_729_927_565_926,
            9_216_989_093_042_288_220,
            14_240_946_967_822_758_312,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks16() {
        let input: [Goldilocks; 16] = [
            13_216_135_600_341_032_847,
            15_626_390_207_663_319_651,
            2_052_474_569_300_149_934,
            4_375_663_431_730_581_786,
            16_596_827_905_941_257_435,
            10_019_626_608_444_427_271,
            7_831_946_179_065_963_230,
            17_104_499_871_144_693_506,
            9_021_930_732_511_690_478,
            6_899_419_210_615_882_449,
            8_131_182_521_761_419_514,
            432_489_675_596_019_804,
            8_508_050_013_409_958_723,
            14_134_506_582_804_571_789,
            13_283_546_413_390_931_641,
            14_711_125_975_653_831_032,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 16] = [
            5_524_669_282_304_516_875,
            17_505_467_846_953_098_022,
            7_505_835_506_215_945_517,
            4_678_037_345_724_403_903,
            10_895_647_714_009_331_453,
            5_085_395_390_658_218_948,
            9_415_955_230_270_042_820,
            612_277_897_076_940_754,
            6_973_621_272_151_388_239,
            3_749_044_944_784_924_855,
            18_059_026_573_819_502_927,
            2_497_516_531_324_297_048,
            4_238_565_225_225_375_968,
            10_076_249_375_516_184_572,
            11_967_060_791_800_253_810,
            6_267_956_432_712_136_737,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks24() {
        let input: [Goldilocks; 24] = [
            11_426_771_245_122_339_662,
            5_975_488_243_963_332_229,
            11_441_424_994_503_305_651,
            5_755_561_333_702_259_678,
            7_295_454_168_648_181_339,
            16_724_279_929_816_174_064,
            32_359_231_037_136_391,
            3_713_621_595_270_370_753,
            8_421_765_959_140_936_778,
            12_370_571_593_326_246_544,
            8_633_733_294_559_731_287,
            12_765_436_832_373_161_027,
            15_606_692_828_890_413_034,
            8_068_160_018_166_226_874,
            10_719_661_629_577_139_538,
            13_036_735_610_140_127_982,
            10_213_543_772_818_211_674,
            8_041_886_705_706_266_368,
            12_022_983_417_703_446_028,
            4_179_370_708_601_587_579,
            11_125_302_089_484_330_465,
            9_904_943_018_174_649_533,
            16_178_194_376_951_442_671,
            1_545_799_842_160_818_502,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 24] = [
            18_431_075_688_485_197_060,
            14_823_984_346_528_185_622,
            7_262_979_358_411_339_215,
            14_816_911_393_874_702_213,
            6_721_523_710_303_409_972,
            10_829_861_327_716_364_029,
            2_456_948_878_733_883_601,
            11_088_379_938_350_287_658,
            3_820_735_023_521_527_858,
            9_062_288_923_770_492_958,
            5_159_244_568_306_327_366,
            1_401_669_669_887_165_869,
            11_908_734_248_351_870_182,
            10_640_195_377_186_320_543,
            6_552_733_980_894_593_378,
            17_103_376_282_032_495_459,
            5_204_287_788_603_805_758,
            17_783_185_518_697_631_139,
            9_006_863_878_586_007_300,
            11_122_535_637_762_904_803,
            5_271_621_316_102_699_962,
            9_734_499_541_452_484_536,
            11_778_274_360_927_642_637,
            3_217_831_681_350_496_533,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks32() {
        let input: [Goldilocks; 32] = [
            8_401_806_579_759_049_284,
            14_709_608_922_272_986_544,
            8_130_995_604_641_968_478,
            7_833_133_203_357_642_391,
            10_700_492_548_100_684_406,
            3_941_105_252_506_602_047,
            8_122_370_916_776_133_262,
            15_079_919_378_435_648_206,
            8_774_521_769_784_086_994,
            16_794_844_316_583_392_853,
            9_356_562_741_425_567_167,
            13_317_198_313_361_936_216,
            7_187_680_218_428_599_522,
            16_525_662_096_158_660_997,
            540_453_741_156_061_014,
            16_543_585_577_270_698_663,
            3_802_215_918_136_285_729,
            11_389_297_895_303_247_764,
            5_133_769_394_766_075_512,
            1_057_795_099_426_170_863,
            18_037_861_421_172_314_665,
            17_632_255_188_776_359_310,
            17_616_515_088_477_043_142,
            13_307_921_676_744_533_876,
            17_602_277_262_015_191_215,
            15_819_040_654_617_566_738,
            11_961_318_546_000_835_928,
            15_593_174_310_433_874_065,
            9_152_657_050_882_549_004,
            4_801_868_480_369_948_110,
            13_202_076_339_494_141_066,
            726_396_847_460_932_316,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 32] = [
            1_179_701_925_859_507_209,
            5_543_239_597_787_055_637,
            5_978_278_622_530_964_070,
            3_622_388_166_841_103_287,
            11_383_243_182_536_830_899,
            14_719_109_850_604_985_734,
            17_672_601_866_826_623_850,
            4_879_627_080_283_827_596,
            7_556_887_460_241_466_109,
            9_548_493_506_061_808_122,
            13_980_851_986_825_291_174,
            2_029_844_508_485_082_398,
            10_375_517_623_784_134_775,
            13_067_093_881_736_606_569,
            6_446_569_064_196_467_795,
            15_375_603_814_779_462_714,
            11_307_946_648_742_033_371,
            1_593_906_954_637_160_608,
            5_776_169_226_282_316_678,
            8_167_048_017_892_669_861,
            3_954_052_226_208_277_367,
            9_346_878_497_567_392_707,
            5_570_872_870_988_220_142,
            10_792_661_164_389_799_960,
            17_494_962_593_174_487_938,
            7_080_549_557_843_445_752,
            14_059_834_522_311_268_132,
            17_747_288_366_997_773_235,
            17_158_122_400_620_315_305,
            6_816_598_002_359_267_850,
            12_363_049_840_026_116_993,
            13_313_901_185_845_854_868,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks64() {
        let input: [Goldilocks; 64] = [
            3_471_075_506_106_776_899,
            4_817_046_918_282_259_009,
            3_480_368_692_354_016_145,
            18_110_937_755_057_600_106,
            3_130_862_083_451_221_140,
            15_376_650_156_021_437_015,
            7_997_596_749_112_997_445,
            7_742_916_918_728_590_149,
            421_644_639_408_377_358,
            2_491_271_421_424_548_020,
            1_940_196_613_872_160_755,
            7_152_053_147_988_203_177,
            13_697_425_352_450_853_423,
            15_877_844_788_345_672_674,
            17_787_098_720_906_653_510,
            6_857_627_524_724_866_519,
            8_541_180_216_786_820_396,
            10_769_715_704_553_877_654,
            9_265_712_399_189_924_160,
            10_220_120_296_438_955_872,
            18_201_417_281_995_610_945,
            6_749_698_931_189_855_822,
            13_700_000_989_116_811_950,
            13_205_437_213_697_578_097,
            10_514_342_943_989_454_609,
            9_926_015_350_795_325_725,
            2_289_808_224_483_690_257,
            12_598_806_357_998_460_973,
            14_393_945_610_969_324_307,
            4_744_625_557_965_362_093,
            2_270_701_163_031_951_561,
            2_927_942_398_784_334_090,
            5_250_916_386_894_733_430,
            4_030_189_910_566_345_872,
            4_953_663_590_324_639_075,
            1_241_519_685_782_896_035,
            8_681_312_160_951_359_069,
            8_236_353_015_475_387_411,
            4_972_690_458_759_871_996,
            1_396_852_754_187_463_352,
            17_512_022_752_774_329_733,
            14_009_268_822_557_836_700,
            1_346_736_409_027_879_377,
            7_609_463_340_861_239_931,
            10_701_512_803_758_419_515,
            5_067_199_073_587_389_986,
            5_030_018_986_055_211_116,
            17_692_625_804_700_013_551,
            9_992_938_630_604_785_132,
            15_350_127_009_762_647_067,
            10_247_405_821_493_235_386,
            15_172_888_833_500_531_069,
            14_657_693_742_399_622_179,
            7_391_511_805_216_089_127,
            2_035_742_693_690_795_598,
            4_047_216_012_963_057_952,
            12_602_085_105_939_403_203,
            16_985_723_692_990_258_059,
            12_141_021_186_082_151_434,
            3_174_646_196_626_212_833,
            16_484_520_987_666_295_947,
            10_579_720_164_460_442_970,
            9_596_917_135_039_689_219,
            13_761_818_390_665_814_258,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 64] = [
            9_158_798_369_861_934_356,
            9_224_859_686_427_886_689,
            16_948_559_910_286_211_274,
            15_765_762_765_140_902_574,
            16_202_509_467_561_200_764,
            1_911_749_439_284_071_529,
            4_607_026_757_869_726_805,
            8_473_827_004_973_131_317,
            13_716_800_466_551_879_373,
            6_670_177_022_201_597_800,
            17_416_833_238_376_299_449,
            14_953_676_562_252_669_578,
            5_828_107_070_718_286_209,
            17_980_287_408_679_531_241,
            2_220_583_438_808_757_820,
            14_564_318_040_622_847_100,
            3_950_519_594_558_514_416,
            12_164_610_170_526_828_198,
            457_385_640_833_960_098,
            14_068_973_922_383_216_628,
            9_614_382_247_226_943_793,
            3_932_756_878_771_319_222,
            12_728_498_054_939_249_570,
            9_435_109_056_498_897_661,
            7_283_114_805_836_756_402,
            1_720_178_259_138_435_097,
            11_496_602_000_538_177_285,
            7_736_206_812_858_942_065,
            14_289_784_438_950_643_645,
            12_052_665_489_155_550_962,
            12_918_409_840_610_303_255,
            5_224_324_424_989_208_352,
            7_826_309_014_606_327_907,
            11_657_314_889_847_733_528,
            13_899_641_072_303_006_348,
            7_501_780_959_676_548_477,
            1_064_261_716_045_449_147,
            1_487_682_458_939_665_452,
            10_894_217_148_983_862_136,
            12_785_338_167_343_566_981,
            8_043_323_074_629_160_032,
            10_852_328_074_701_301_213,
            15_029_722_608_724_150_267,
            2_611_937_278_660_861_263,
            13_995_790_409_949_796_943,
            7_103_138_700_054_564_899,
            12_756_778_219_044_204_581,
            4_147_399_997_707_606_088,
            11_930_966_590_061_754_579,
            16_708_700_985_380_478_903,
            2_370_160_521_342_035_603,
            14_893_791_582_608_133_454,
            15_313_288_276_425_450_946,
            16_224_601_303_711_716_386,
            4_488_931_442_519_177_087,
            7_443_169_181_907_410_918,
            12_381_442_753_785_370_161,
            16_366_345_507_676_500_076,
            8_097_905_256_807_642_731,
            8_504_207_502_183_388_457,
            11_400_931_328_719_780_407,
            10_879_211_614_969_476_303,
            7_265_889_003_783_205_111,
            7_322_738_272_300_165_489,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }

    #[test]
    fn goldilocks68() {
        let input: [Goldilocks; 68] = [
            16_450_563_043_143_968_653,
            3_688_080_826_640_678_185,
            133_253_417_037_384_537,
            17_501_558_583_799_613_353,
            14_920_674_569_425_704_293,
            5_030_578_721_963_251_055,
            9_795_600_398_273_758_687,
            402_012_644_192_671_817,
            10_657_312_189_068_414_445,
            9_508_835_336_085_746_575,
            16_081_669_758_721_272_608,
            2_072_823_794_278_273_547,
            16_831_381_326_702_573_736,
            11_381_683_312_293_543_190,
            5_679_539_322_738_625_588,
            9_346_499_485_038_639_332,
            15_554_202_803_455_984_983,
            18_373_955_571_490_331_663,
            11_323_895_584_334_729_789,
            16_834_542_679_468_148_445,
            14_751_528_164_286_075_953,
            3_755_158_780_970_327_991,
            12_622_814_707_645_103_582,
            10_329_238_611_694_882_547,
            7_642_766_530_280_843_057,
            4_876_120_096_290_984_742,
            412_912_224_820_604_426,
            9_118_233_770_240_274_553,
            3_626_520_971_021_993_076,
            10_841_049_054_903_806_738,
            18_205_546_599_950_141_835,
            7_198_482_606_375_262_809,
            17_183_313_930_831_625_294,
            10_181_033_256_431_249_241,
            1_061_211_413_812_819_905,
            3_980_261_141_891_682_525,
            5_674_176_959_446_948_353,
            6_062_696_542_969_845_681,
            3_383_081_006_315_025_715,
            8_812_665_902_421_024_067,
            3_093_645_099_818_246_186,
            16_178_737_149_039_707_082,
            8_204_245_222_345_541_411,
            11_072_582_337_937_050_490,
            17_969_785_901_925_882_398,
            4_670_890_092_981_706_609,
            12_537_558_683_977_529_426,
            12_084_598_516_323_376_868,
            16_293_685_096_019_175_644,
            10_117_612_240_421_467_846,
            17_873_102_395_739_074_620,
            11_220_493_906_741_851_877,
            4_632_957_003_022_201_019,
            12_934_229_307_704_669_322,
            2_152_792_796_882_257_594,
            12_521_131_928_134_126_701,
            17_472_006_670_677_761_650,
            4_560_570_065_837_283_016,
            6_315_543_803_073_912_887,
            4_098_689_719_955_359_793,
            1_784_883_877_365_258_237,
            6_837_590_090_927_294_950,
            2_391_417_016_765_166_652,
            16_389_291_664_603_960_875,
            12_285_946_887_702_044_436,
            7_231_705_445_010_258_971,
            12_976_071_926_225_281_356,
            8_829_402_645_443_096_358,
        ]
        .map(Goldilocks::from_canonical_u64);

        let output = MdsMatrixGoldilocks.permute(input);

        let expected: [Goldilocks; 68] = [
            4_984_914_285_749_049_383,
            10_397_959_071_664_799_177,
            3_331_616_814_639_908_945,
            4_252_459_885_611_162_121,
            5_517_786_723_806_029_201,
            1_826_620_401_370_703_815,
            8_257_849_352_373_689_773,
            1_722_805_960_790_112_693,
            17_654_983_138_917_187_833,
            7_542_660_006_721_409_612,
            1_970_182_718_241_277_021,
            12_865_815_507_550_811_641,
            17_507_096_607_056_552_658,
            7_988_714_902_687_660_369,
            150_082_662_759_625_574,
            17_329_095_993_317_360_383,
            965_880_604_543_562_997,
            2_820_931_239_306_841_741,
            1_980_667_983_336_380_501,
            3_781_794_112_174_728_826,
            7_323_192_150_179_872_391,
            12_243_426_826_276_589_932,
            315_076_483_410_634_889,
            3_221_894_784_246_078_707,
            3_515_955_216_509_190_252,
            964_376_148_920_419_876,
            7_679_719_864_273_407_732,
            2_516_714_701_741_920_303,
            4_837_221_266_652_621_366,
            15_301_563_603_415_983_061,
            10_380_321_314_559_647_625,
            3_023_678_426_639_670_063,
            12_020_917_879_204_725_519,
            10_595_808_165_609_787_680,
            14_199_186_729_378_048_831,
            4_520_610_719_509_879_248,
            9_983_949_546_821_718_635,
            5_066_092_593_424_854_949,
            13_843_503_196_305_181_790,
            14_296_362_815_835_302_652,
            6_766_348_697_864_530_153,
            13_804_582_129_741_554_661,
            8_032_169_955_336_281_598,
            5_198_513_488_794_721_460,
            10_613_667_919_514_788_349,
            7_948_289_550_930_596_506,
            14_118_391_408_956_101_449,
            4_356_952_068_887_595_371,
            709_878_153_008_378_134,
            17_168_579_964_784_489_802,
            17_840_495_726_541_494_819,
            2_710_471_020_841_761_312,
            9_950_159_372_116_756_450,
            3_909_574_932_971_200_058,
            2_430_964_021_804_554_670,
            6_035_162_446_515_244_642,
            14_656_543_530_572_478_095,
            1_539_013_407_173_403_800,
            4_150_113_154_618_904_744,
            4_904_646_199_269_229_662,
            17_257_014_030_727_492_672,
            3_791_823_431_764_085_889,
            13_680_668_409_434_600_948,
            12_367_427_987_617_118_934,
            12_462_908_457_168_650_050,
            10_891_613_749_697_412_017,
            6_867_760_775_372_053_830,
            12_474_954_319_307_005_079,
        ]
        .map(Goldilocks::from_canonical_u64);

        assert_eq!(output, expected);
    }
}
